DATA EXTRACTION:

Database Setup: Created a new MySQL database named 'healthdata' to store the health-related data.

Data Loading and Table Creation: Utilized the MySQL "Table data import wizard" to load data from the CSV files into the tables named 'patient health and diet' and 'patient profile'.

Data Validation: Performed preliminary data validation during the loading process to identify any irregularities or inconsistencies.

ISSUES FACED:

Data Formatting: Encountered issues with inconsistent formatting of certain columns, such as non-numeric characters in BMI.

Null Values: Some columns contained significant null values that needed to be addressed to ensure data integrity.

SOLUTIONS IMPLEMENTED:

Data Cleaning: Used SQL functions to remove non-numeric characters from BMI values and converted them to numeric types.

Null Handling: Executed SQL statements to identify and update null values in critical columns based on context or averages.

SCREENSHOT OF A SELECT STATEMENT DONE:

![image](https://github.com/VinithaVarghese/DATA-1202-FINAL-ASSIGNMENT-ID-100801304-/assets/138626409/44f0e968-af11-4a7b-8304-79445b2cb7a4)

DATA TRANSFORMATION

In the data transformation phase, I conducted quality checks, performed transformations, and employed aggregation and JOIN operations to derive valuable insights from the health-related data. Here are the details of the transformations I applied:

Quality Checks:

Conducted checks to ensure data consistency, identifying any missing or incomplete values in critical columns like Heart_Disease, Skin_Cancer, etc.
Verified data types to ensure correct numeric and string formats.
Aggregation and JOIN Operations:

Heart Disease Distribution and Exercise Habits Analysis:
Aggregated data by joining the 'patient health and diet' table with the 'patient profile' table using the 'ID' column. This allowed me to analyze the relationship between exercise habits, heart disease, and their distribution.

Average BMI by Age Category:
Utilized a GROUP BY operation on the 'Age_Category' column in the 'patient profile' table to calculate the average BMI for each age category, providing insights into health trends by age.

Gender-based Health Patterns:
Employed a JOIN operation between the 'patient health and diet' and 'patient profile' tables using the 'ID' column. By grouping data based on 'Sex', I calculated average rates of various health conditions like Heart Disease, Skin Cancer, etc.

Nutrition Habits and Health Conditions:
Used aggregation and JOIN operations to analyze nutrition habits and health conditions, calculating average rates of various health conditions and nutritional habits from both tables.

Average BMI by General Health Status:
Aggregated data by 'General_Health' status using the 'patient profile' table, calculating the rounded average BMI for each health status category.

EFFECTS OF TRANSFORMATIONS:

Insightful Analysis: The applied transformations allowed me to gain valuable insights into the relationships between health conditions, exercise habits, nutrition, and demographic factors such as age and gender.

Better Decision-Making: Aggregating and analyzing data through GROUP BY and JOIN operations enabled me to identify patterns and trends, aiding in data-driven decision-making for health-related recommendations and interventions.

Data Integrity Enhancement: Addressing missing values and data inconsistencies during quality checks improved the integrity of the data, ensuring accurate analysis and insights.

Deeper Understanding: The transformations helped in understanding correlations between different health factors and demographic characteristics, contributing to a more comprehensive view of the dataset.


DATA LOADING

In the data loading phase, I loaded the clean and transformed data into a second table named AGE_GENDER_HEALTH_INSIGHTS in the MySQL database. Here's how the process was done and the reasoning behind it:

LOADING PROCESS:

During the data loading phase, I incorporated the cleaned and transformed data into a MySQL database by creating views that combine relevant information from various tables. This approach allowed me to avoid duplicating data while enabling efficient analysis through SQL queries. I utilized the CREATE VIEW statement to generate dynamic virtual tables based on the transformed data, ensuring consistent and up-to-date insights without the need to duplicate or store the data redundantly.

HOW THIS PROCESS WAS DONE:

Database Structure and Transformation: After performing data cleaning and transformation, I had a set of cleaned and processed tables representing different aspects of health and lifestyle data. These tables were designed to be free of inconsistencies, missing values, and outliers, ensuring the integrity of the data.

Creating Views: Instead of creating new physical tables to store the transformed data, I opted to create views. Views are virtual tables that are defined by SQL queries. They allow users to query and retrieve data just like they would from a regular table. Views don't store data themselves; they simply present the data in a structured format based on the underlying source tables thereby consuming only minimal additional storage space.
I created views using SQL queries that combined data from multiple source tables based on common columns or criteria. For instance, I created a view to calculate average BMI by age category, another view to capture health patterns by gender, and so on.

THE RATIONALS FOR USING VIEWS

Loading Impact: By using views to load the data, the impact on the database was minimized in terms of storage and maintenance. It helped maintain data integrity and consistency, and allowed users to efficiently query and analyze the transformed data without needing to re-run transformations each time.

Querying: Analysts and users could easily query the views to extract meaningful insights without dealing with the intricacies of data transformations. The views provided a convenient way to perform various analyses and generate reports.

Real-time Data: Views allowed real-time access to the most up-to-date data. Any changes made to the source tables would be immediately reflected in the views.

In summary, the decision to load the cleaned and transformed data through views was motivated by the need for data integrity, performance optimization, data abstraction, and access control. This approach streamlined data access, reduced data duplication, and ensured that the most accurate and up-to-date information was available for analysis tasks.
